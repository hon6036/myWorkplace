브루트 포스 알고리즘
가능한 모든 경우의 수를 시도하는 방법으로 계산량이 많아지면 비효율적 

m에 가까운 리스트 s중 3수의 합

n,m = map(int, input().split())
s = list(map(int, input().split()))
ls = []
for i in range(len(s)):
    for j in range((i+1), len(s)):
        for k in range((j+1), len(s)):
            ls.append(sum([s[i],s[j],s[k]]))
ls = [i for i in ls if i <= m]
if ls:
    print(max(ls))
    
정렬 알고리즘

Name	   Best	  Worst	       Stable	   Memory
버블정렬	n	     n^2	         True	    1
선택정렬	n^2    n^2	         False   	1
삽입정렬 	n	     n^2	         True	    1
셸정렬    nlogn	nlog2n	      False	   1
병합정렬	nlogn	 nlogn	       True	    n
퀵정렬	   nlogn	nlogn ~ n^2	  False	  logn ~ n

버블정렬 
이웃한 두값을 비교하여 정렬

def swap(x, i, j):
    x[i], x[j] = x[j], x[i]

def bubbleSort(x):
    for size in reversed(range(len(x))):
        for i in range(size):
            if x[i] > x[i+1]:
                swap(x, i, i+1)
                

선택정렬
최댓값(최솟값)을 찾아 맨오른쪽(맨왼쪽) 값과 교체

def swap(x, i, j):
    x[i], x[j] = x[j], x[i]

def selectionSort(x):
    for size in reversed(range(len(x))):
        max_i = 0
        for i in range(1, 1+size):
            if x[i] > x[max_i]:
                max_i = i
        swap(x, max_i, size)
        
삽입 정렬
아직 정렬되지 않은 값을 이미 정렬된 배열 사이에 끼워 넣는 과정 반복

def insertionSort(x):
    for size in range(1, len(x)):
        val = x[size]
        i = size
        while i > 0 and x[i-1] > val:
            x[i] = x[i-1]
            i -= 1
        x[i] = val
        
셸 정렬
주어진 간격만큼 듬성듬성 떨어진 서브배여을 만들어 삽입정렬 수행
모든 서브 배열에 대해 삽입정렬을 마쳤다면 간격을 절반으로 줄여 반복

def gapInsertionSort(x, start, gap):
    for target in range(start+gap, len(x), gap):
        val = x[target]
        i = target
        while i > start:
            if x[i-gap] > val:
                x[i] = x[i-gap]
            else:
                break
            i -= gap
        x[i] = val

def shellSort(x):
    gap = len(x) // 2
    while gap > 0:
        for start in range(gap):
            gapInsertionSort(x, start, gap)
        gap = gap // 2
        
병합 정렬
두 부분으로 쪼개는 작업을 재귀적으로 반복한 뒤 쪼갠 순서의 반대로 작은 값부터 병합해나가는 분할 정복 알고리즘의 일부

def mergeSort(x):
    if len(x) > 1:
        mid = len(x)//2
        lx, rx = x[:mid], x[mid:]
        mergeSort(lx)
        mergeSort(rx)

        li, ri, i = 0, 0, 0
        while li < len(lx) and ri < len(rx):
            if lx[li] < rx[ri]:
                x[i] = lx[li]
                li += 1
            else:
                x[i] = rx[ri]
                ri += 1
            i += 1
        x[i:] = lx[li:] if li != len(lx) else rx[ri:]
        

퀵정렬
기준 값(피벗)을 정해 피벗 보다 작은 값은 앞쪽 큰 값은 뒤 쪽에 오도록 함

def swap(x, i, j):
    x[i], x[j] = x[j], x[i]

def pivotFirst(x, lmark, rmark):
    pivot_val = x[lmark]
    pivot_idx = lmark
    while lmark <= rmark:
        while lmark <= rmark and x[lmark] <= pivot_val:
            lmark += 1
        while lmark <= rmark and x[rmark] >= pivot_val:
            rmark -= 1
        if lmark <= rmark:
            swap(x, lmark, rmark)
            lmark += 1
            rmark -= 1
    swap(x, pivot_idx, rmark)
    return rmark

def quickSort(x, pivotMethod=pivotFirst):
    def _qsort(x, first, last):
        if first < last:
            splitpoint = pivotMethod(x, first, last)
            _qsort(x, first, splitpoint-1)
            _qsort(x, splitpoint+1, last)
    _qsort(x, 0, len(x)-1)
    
    

