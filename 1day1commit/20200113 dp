백준 10844

45656이란 수를 보자.

이 수는 인접한 모든 자리수의 차이가 1이 난다. 이런 수를 계단 수라고 한다.

세준이는 수의 길이가 N인 계단 수가 몇 개 있는지 궁금해졌다.

N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구하는 프로그램을 작성하시오. (0으로 시작하는 수는 없다.)

입력
첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.

출력
첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.

dp[N][M] 이라 했을 떄 M으로 끝나는 N자리 계단의 총 개수 이고
dp[1][M] 일 때 0 과 9를 제외한 모든 수는 1이고
dp[N][1] = dp[N-1][0] + dp[N-1][2] 이다
따라서 점화식은
dp[i][j] = d[i-1][j-1] + dp[i-1][i+1]
             j>0            j<9
             
n = int(input())
dp = [[0]*10 for _ in range(n+1)]

for i in range(1,10):
    dp[1][i] = 1
for i in range(2,n+1):
    for j in range(0,10):
        if j > 0:
            dp[i][j] += dp[i-1][j-1]
        if  j < 9:
            dp[i][j] += dp[i-1][j+1]
        dp[i][j] %= 1000000000
print(sum(dp[n])%1000000000)


백준 파이썬 2156

효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 
효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.

1. 포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
2. 연속으로 놓여 있는 3잔을 모두 마실 수는 없다.

효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 
1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오. 

예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.

포도주를 선택할 경우의 수는 OXOO 와 OXO와 X가 있다 따라서

n = int(input())
s = [0]
for _ in range(n):
    s.append(int(input()))
result = [0 for _ in range(n+1)]
for i in range(1, n+1):
    if i == 1:
        result[i] = s[i]
    elif i == 2:
        result[i] = s[i] + s[i-1]
    else:
        result[i] = max(result[i-3] + s[i-1] + s[i], result[i-2] + s[i], result[i-1])

print(result[n])

세번째 전의 결과 + 방금 전의 결과 + 지금 
두번째 전의 결과 지금
방금전의 결과 
위 세개의 최대값 중 하나를 선택해야 한다

백준 11053 

수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 30, 50} 이고, 길이는 4이다.

n = int(input())
s = list(map(int, input().split()))
result = [1] * n
for i in range(1,n):
    for j in range(i):
        if s[j] < s[i]:
            result[i] = max(result[i], result[j] + 1)
print(max(result))
            


