택시 기하학에서의 원
r * r *2
유클리드 기하학에서의 원
r * r * math.pi

두 원의 교점의 개수

두원이 겹칠 때
if r1 == r2 and r == 0:
        print(-1)
두 원이 내접 하거나 외접 할 때
elif r1 + r2 == r or r2 == r1 + r or r1 == r2 + r:
    print(1)
두 원이 겹치지 않을 때
elif r > r1 + r2 or r1 > r2 + r or r2 > r1 + r:
    print(0)
두원이 두개의 교점으로 겹칠 때
else:
    print(2)
    
팩토리얼 재귀 함수
def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n-1)

n = int(input())
print(factorial(n))

피보나치 재귀함수
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    return fibonacci(n-1) + fibonacci(n-2)
n = int(input())
print(fibonacci(n))

분할 정복 알고리즘

n = 27 일 때

***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************
*********         *********
* ** ** *         * ** ** *
*********         *********
***   ***         ***   ***
* *   * *         * *   * *
***   ***         ***   ***
*********         *********
* ** ** *         * ** ** *
*********         *********
***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************

문제에 n은 3의 제곱 꼴로 나온다고 하니 세줄씩 나눠 보면

***************************  인덱스 0
* ** ** ** ** ** ** ** ** *  인덱스 1
***************************  인덱스 2


***   ******   ******   ***  인덱스 3
* *   * ** *   * ** *   * *  인덱스 4
***   ******   ******   ***  인덱스 5


***************************  인덱스 6
* ** ** ** ** ** ** ** ** *  인덱스 7
***************************  인덱스 8


*********         *********  인덱스 9
* ** ** *         * ** ** *  인덱스 10
*********         *********  인덱스 11


***   ***         ***   ***  인덱스 12
* *   * *         * *   * *  인덱스 13
***   ***         ***   ***  인덱스 14


*********         *********  인덱스 15
* ** ** *         * ** ** *  인덱스 16
*********         *********  인덱스 17


***************************  인덱스 18
* ** ** ** ** ** ** ** ** *  인덱스 19
***************************  인덱스 20


***   ******   ******   ***  인덱스 21
* *   * ** *   * ** *   * *  인덱스 22
***   ******   ******   ***  인덱스 23


***************************  인덱스 24
* ** ** ** ** ** ** ** ** *  인덱스 25
***************************  인덱스 26

인덱스가 1, 4, 7, 10, 13, 16, 19, 25 마다 빈칸이 생기며 이는 1을 제외한 3의 배수 + 1 이고 즉 idx % 3인 수 이다
두번째 줄에서도 1, 4, 7, 10, 13, 16, 19, 25 인덱스에 빈칸이 생기는걸 알 수 있다.
이걸 9(3^2)칸으로 다시 나누면

***************************  인덱스 0
* ** ** ** ** ** ** ** ** *  
***************************  
***   ******   ******   ***  인덱스 1
* *   * ** *   * ** *   * *  
***   ******   ******   ***  
***************************  인덱스 2
* ** ** ** ** ** ** ** ** *  
***************************  


*********         *********  인덱스 3
* ** ** *         * ** ** *  
*********         *********  
***   ***         ***   ***  인덱스 4
* *   * *         * *   * *  
***   ***         ***   ***  
*********         *********  인덱스 5
* ** ** *         * ** ** *  
*********         *********  


***************************  인덱스 6
* ** ** ** ** ** ** ** ** *  
***************************  
***   ******   ******   ***  인덱스 7
* *   * ** *   * ** *   * *  
***   ******   ******   ***  
***************************  인덱스 8
* ** ** ** ** ** ** ** ** *  
***************************  

3개씩 한세트로 봤을 때 1,4,7번 인덱스가 가장 큰 빈칸이 나오는걸 알 수 있다.
즉 위와 같은 방식으로 3^n n번 반복 하면 된다 따라서 

def star(i):
    global arr
    idx = [i for i in range(n) if (i// 3 ** cnt_) % 3 == 1]
    for i in idx:
        for j in idx:
            arr[i][j] = " "
n = int(input())
v = n
cnt = 0
while v != 1:
    v /= 3
    cnt += 1
arr = [["*"]*n for _ in range(n)]
for cnt_ in range(cnt):
    star(cnt_)
print('\n'.join([''.join([str(i) for i in row]) for row in arr]))


_(언더바) 

값을 무시하고 싶은 경우
>>> a,_,c = (1,2,3)
>>> a
1
>>> _
2
>>> c
3

여러 값 무시
>>> a,*_,c = (1,2,3,4,5,6)
>>> a
1
>>> _
[2, 3, 4, 5]
>>> c
6

값의 연결
>>> def pr(i):
	print(i , "dddd")
	print(cnt_)

>>> for cnt_ in range(3):
	pr(cnt_)

0 dddd
0
1 dddd
1
2 dddd
2

하노이 원탑

def hanoi(disk, start, mid, end):
    if disk == 1:
        print(start, end)
    else:
        hanoi(disk - 1, start, end, mid)
        print(start, end)
        hanoi(disk - 1, mid, start, end)

total_disk = int(input())
total_mvmt = 0

for disk in range(total_disk):
    total_mvmt = total_mvmt * 2
    total_mvmt += 1

print(total_mvmt)
hanoi(total_disk, 1, 2, 3)

n개의 원판을 옮길 때 n-1 개의 원판을 중간에 놓고 제일 큰걸 끝에 옮김 이후에 다시 n-1개의 원판을 중간에서 끝으로 

